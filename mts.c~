
// TODO: Synchronize trains to begin loading all at once

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <stdbool.h>

typedef struct
{
	int tid;
	char dir;
	float loadTime;
	float crossTime;
	pthread_t thread;
	pthread_cond_t condVar;
} train;

// ======= Prototypes ======
void init_trains(char*,int);
void init_trainStruct(char*[], int);
void load_trains(int);
void* load(void*);
// =========================

// ======= Constants ========
#define MAX_NTRAINS 100
// ==========================

// ======== Globals =========
train* trainSet[MAX_NTRAINS];
bool beginLoading = false;
// ==========================

// === Condition Variables & Mutexes ===
pthread_cond_t loadingCV = PTHREAD_COND_INITIALIZER;
pthread_mutex_t loadingMutex = PTHREAD_MUTEX_INITIALIZER;
// =====================================

void main(int argc, char* argv[])
{
	char* filename = argv[1];
	int ntrains = atoi(argv[2]);
	if(ntrains <= 0)
	{
		perror("specify at least one train");
		exit(1);
	}
	init_trains(filename, ntrains);
	load_trains(ntrains);
}

void init_trains(char* filename, int ntrains)
{
	FILE* file = fopen(filename, "r");
	ssize_t l_length;
	size_t len = 0;
	char* line = NULL;
	if(!file)
	{
		perror("fopen");
		exit(1);
	}
	else
	{
		char* tok;
		char* delims = ":,\n";
		int currentLine = 0;
		
		while((l_length = getline(&line, &len, file)) != -1)
		{
			char* trainData[4];
			int i = 0;
			if(currentLine == ntrains)
				break;
			// tokenize line with delims
			tok = strtok(line, delims);
			while(tok != NULL)
			{
				trainData[i] = tok;
				tok = strtok(NULL, delims);
				i++;
			}
			// store each element of trainData in a new train struct
			init_trainStruct(trainData, currentLine);
			currentLine++;
		}
	}
	fclose(file);
	if(line)
		free(line);
}

void init_trainStruct(char* trainData[4], int trainId)
{
	train* trainStruct = (train*)malloc(sizeof(train));
	trainStruct->tid = trainId;
	trainStruct->dir = *trainData[0];
	trainStruct->loadTime = atof(trainData[1]);
	trainStruct->crossTime = atof(trainData[2]);
	// store the train struct in the trainSet based on its tid
	trainSet[trainStruct->tid] = trainStruct;
}

void load_trains(int ntrains)
{
	int i;
	for(i=0; i<ntrains; i++)
	{
		printf("starting train %d\n", i);
		if(pthread_cond_init(&trainSet[i]->condVar, NULL) != 0)
			perror("pthread_cond_init");
		// start the loading process
		pthread_create(&trainSet[i]->thread, NULL, load, (void*)trainSet[i]);
		// wait for this train to finish loading
		printf("joining...\n");
		pthread_join(trainSet[i]->thread, NULL);
	}

	for(i=0; i<ntrains; i++)
	{
		printf("signalling train %d\n",i);
		// signal all threads to start loading
		pthread_cond_signal(&trainSet[i]->condVar);
	}
	//beginLoading = true;

}

void* load(void* ptr)
{
	train* trainStruct = (train*)ptr;
	// wait to be signalled to load before loading
	//while(!beginLoading){}
	pthread_cond_wait(&trainStruct->condVar, &loadingMutex);
	printf("Train %d loading for %fsec...\n",trainStruct->tid, (trainStruct->loadTime)/10);
	unsigned int microsec = (trainStruct->loadTime)*100000;
	usleep(microsec);
	printf("Train %d done loading\n",trainStruct->tid);
}

